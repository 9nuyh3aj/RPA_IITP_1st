<Activity mc:Ignorable="sap sap2010" x:Class="T04_01_MergeKHR" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="i_config" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property Name="io_dt_annual" Type="InOutArgument(sd:DataTable)" />
  </x:Members>
  <sap2010:ExpressionActivityEditor.ExpressionActivityEditor>C#</sap2010:ExpressionActivityEditor.ExpressionActivityEditor>
  <sap:VirtualizedContainerService.HintSize>1159,2095</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="T04_01_MergeKHR" sap:VirtualizedContainerService.HintSize="708,2030" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="dt_iitpEdu" />
      <Variable x:TypeArguments="x:String" Name="str_eduInfoFileName" />
      <Variable x:TypeArguments="x:String" Name="str_eduInfoFilePath" />
      <Variable x:TypeArguments="x:String" Name="str_startDate" />
      <Variable x:TypeArguments="x:String" Name="str_endDate" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="666,1942" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <TryCatch.Try>
        <Sequence DisplayName="Input/Ouput 폴더 생성" sap:VirtualizedContainerService.HintSize="628,1714" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:MultipleAssign sap2010:Annotation.AnnotationText="시작날짜 : 올해 1월 1일&#xA;종료날짜 : 오늘&#xA;한마루 인사교육정보 파일명&#xA;한마루 인사교육정보 파일 경로" DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="586,124" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_17">str_startDate</CSharpReference>
                    </OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_17">new DateTime(DateTime.Today.Year, 1, 1).ToString("yyyyMMdd");</CSharpValue>
                    </InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_18">str_endDate</CSharpReference>
                    </OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_18">DateTime.Today.ToString("yyyyMMdd")</CSharpValue>
                    </InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_15">str_eduInfoFileName</CSharpReference>
                    </OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_19">string.Format(i_config["IITP_EduInfoListFileName"], str_startDate, str_endDate)</CSharpValue>
                    </InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">
                      <CSharpReference x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpReference`1_16">str_eduInfoFilePath</CSharpReference>
                    </OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">
                      <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_20">Path.Combine(i_config["RPA_Input"], str_eduInfoFileName)</CSharpValue>
                    </InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:MultipleAssign>
          <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" sap2010:Annotation.AnnotationText="한마루 인사교육정보 파일을 전직원교육현황파일에 작성" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="586,1462" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_1">
            <ueab:ExcelProcessScopeX.Body>
              <ActivityAction x:TypeArguments="ui:IExcelProcess">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                </ActivityAction.Argument>
                <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="552,1344" sap2010:WorkflowViewState.IdRef="Sequence_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" sap2010:Annotation.AnnotationText="인사교육정보" CreateNewFile="False" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="510,1256" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ResizeWindow="None">
                    <ueab:ExcelApplicationCard.Body>
                      <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="476,956" sap2010:WorkflowViewState.IdRef="Sequence_6">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ueab:ForEachSheetX DisplayName="For Each Excel Sheet" sap:VirtualizedContainerService.HintSize="434,868" sap2010:WorkflowViewState.IdRef="ForEachSheetX_1">
                            <ueab:ForEachSheetX.Body>
                              <ActivityAction x:TypeArguments="ue:WorksheetQuickHandle, x:Int32">
                                <ActivityAction.Argument1>
                                  <DelegateInArgument x:TypeArguments="ue:WorksheetQuickHandle" Name="CurrentSheet" />
                                </ActivityAction.Argument1>
                                <ActivityAction.Argument2>
                                  <DelegateInArgument x:TypeArguments="x:Int32" Name="CurrentIndex" />
                                </ActivityAction.Argument2>
                                <Sequence DisplayName="실행" sap:VirtualizedContainerService.HintSize="300,704" sap2010:WorkflowViewState.IdRef="Sequence_4">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <ui:ExcelReadRange AddHeaders="True" sap2010:Annotation.AnnotationText="인사교육정보 데이터테이블로 읽기" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="258,94" sap2010:WorkflowViewState.IdRef="ExcelReadRange_1" Range="D2">
                                    <ui:ExcelReadRange.DataTable>
                                      <OutArgument x:TypeArguments="sd:DataTable">
                                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_3">dt_iitpEdu</CSharpReference>
                                      </OutArgument>
                                    </ui:ExcelReadRange.DataTable>
                                    <ui:ExcelReadRange.SheetName>
                                      <InArgument x:TypeArguments="x:String">
                                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_6">CurrentSheet.Name</CSharpValue>
                                      </InArgument>
                                    </ui:ExcelReadRange.SheetName>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:ExcelReadRange>
                                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="258,52" sap2010:WorkflowViewState.IdRef="CommentOut_3">
                                    <ui:CommentOut.Body>
                                      <Sequence DisplayName="무시된 액티비티" sap:VirtualizedContainerService.HintSize="300,182" sap2010:WorkflowViewState.IdRef="Sequence_12">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:FilterDataTable sap2010:Annotation.AnnotationText="역량 = 전문 OR 역량 = 리더쉽" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="258,94" sap2010:WorkflowViewState.IdRef="FilterDataTable_1" SelectColumnsMode="Remove">
                                          <ui:FilterDataTable.DataTable>
                                            <InArgument x:TypeArguments="sd:DataTable">
                                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_23">dt_iitpEdu</CSharpValue>
                                            </InArgument>
                                          </ui:FilterDataTable.DataTable>
                                          <ui:FilterDataTable.Filters>
                                            <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                                              <ui:FilterOperationArgument BooleanOperator="And" Operator="CONTAINS">
                                                <ui:FilterOperationArgument.Column>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_21">"역량"</CSharpValue>
                                                  </InArgument>
                                                </ui:FilterOperationArgument.Column>
                                                <ui:FilterOperationArgument.Operand>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_22">"전문"</CSharpValue>
                                                  </InArgument>
                                                </ui:FilterOperationArgument.Operand>
                                              </ui:FilterOperationArgument>
                                              <ui:FilterOperationArgument BooleanOperator="Or" Operator="CONTAINS">
                                                <ui:FilterOperationArgument.Column>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_24">"역량"</CSharpValue>
                                                  </InArgument>
                                                </ui:FilterOperationArgument.Column>
                                                <ui:FilterOperationArgument.Operand>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_25">"리더십"</CSharpValue>
                                                  </InArgument>
                                                </ui:FilterOperationArgument.Operand>
                                              </ui:FilterOperationArgument>
                                            </scg:List>
                                          </ui:FilterDataTable.Filters>
                                          <ui:FilterDataTable.OutputDataTable>
                                            <OutArgument x:TypeArguments="sd:DataTable">
                                              <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_13">dt_iitpEdu</CSharpReference>
                                            </OutArgument>
                                          </ui:FilterDataTable.OutputDataTable>
                                          <ui:FilterDataTable.SelectColumns>
                                            <scg:List x:TypeArguments="InArgument" Capacity="4">
                                              <x:Null />
                                            </scg:List>
                                          </ui:FilterDataTable.SelectColumns>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:FilterDataTable>
                                      </Sequence>
                                    </ui:CommentOut.Body>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:CommentOut>
                                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="(전문) 값 입력" Code="try{&#xD;&#xA;&#x9;int int_maxCredit = 10;&#xD;&#xA;&#xD;&#xA;&#x9;var speEdu = dt_iitpEdu.AsEnumerable()&#xD;&#xA;&#x9;                            .Where(row =&gt; row.Field&lt;string&gt;(&quot;역량&quot;) == &quot;전문&quot;)&#xD;&#xA;&#x9;                            .ToList();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach(var row in speEdu){&#xD;&#xA;&#x9;&#x9;// 이미 입력된 건이면 기존 row를 찾아 점수만 다시 입력&#xD;&#xA;&#x9;&#x9;bool bol_overWriteData = false;&#xD;&#xA;&#x9;&#x9;DataRow annualRow = io_dt_annual.NewRow();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;foreach(DataRow dr in io_dt_annual.Rows){&#xD;&#xA;&#x9;&#x9;&#x9;if(dr[&quot;직원번호&quot;] == row[&quot;사번&quot;].ToString() &amp;&amp; dr[&quot;과정명&quot;] == row[&quot;과정명 직접입력&quot;].ToString()){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;bol_overWriteData = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;annualRow = dr;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// 입력되어있지 않은 값이라면 row 입력&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;직원번호&#x9;성명&#x9;구분&#x9;과정명&#x9;교육기간&#x9;이수학점&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;if(!bol_overWriteData){&#xD;&#xA;&#x9;&#x9;&#x9;// 나머지 입력&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;구분&quot;] = &quot;전문&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;string startDate = DateTime.ParseExact(row[&quot;시작일자&quot;].ToString().Split(' ')[0], &quot;MM/dd/yyyy&quot;, System.Globalization.CultureInfo.InvariantCulture).ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;string endDate = DateTime.ParseExact(row[&quot;종료일자&quot;].ToString().Split(' ')[0], &quot;MM/dd/yyyy&quot;, System.Globalization.CultureInfo.InvariantCulture).ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;교육기간&quot;] = $&quot;{startDate}~{endDate}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;이수학점&quot;] = row[&quot;이수&lt;BR&gt;학점&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xD;&#xA;&#x9;&#x9;&#x9;io_dt_annual.Rows.Add(annualRow);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else{&#xD;&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{row[&quot;사번&quot;]}의 전문 교육은 이미 입력되어있습니다.&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;catch(Exception e){&#xD;&#xA;&#x9;Console.WriteLine(e.Message);&#xD;&#xA;&#x9;throw;&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="258,83" sap2010:WorkflowViewState.IdRef="InvokeCode_5" Language="CSharp">
                                    <ui:InvokeCode.Arguments>
                                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_annual">
                                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_20">io_dt_annual</CSharpReference>
                                      </InOutArgument>
                                      <InArgument x:TypeArguments="sd:DataTable" x:Key="dt_iitpEdu">
                                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_30">dt_iitpEdu</CSharpValue>
                                      </InArgument>
                                    </ui:InvokeCode.Arguments>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeCode>
                                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="(리더십) 값 입력" Code="try{&#xD;&#xA;&#x9;int int_maxCredit = 10;&#xD;&#xA;&#xD;&#xA;&#x9;var leaderShipEdu = dt_iitpEdu.AsEnumerable()&#xD;&#xA;&#x9;                            .Where(row =&gt; row.Field&lt;string&gt;(&quot;역량&quot;) == &quot;리더십&quot;)&#xD;&#xA;&#x9;                            .ToList();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach(DataRow row in leaderShipEdu){&#xD;&#xA;&#x9;&#x9;// 이미 입력된 건이면 기존 row를 찾아 점수만 다시 입력&#xD;&#xA;&#x9;&#x9;bool bol_overWriteData = false;&#xD;&#xA;&#x9;&#x9;DataRow annualRow = io_dt_annual.NewRow();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;foreach(DataRow dr in io_dt_annual.Rows){&#xD;&#xA;&#x9;&#x9;&#x9;if(dr[&quot;직원번호&quot;] == row[&quot;사번&quot;].ToString() &amp;&amp; dr[&quot;과정명&quot;] == row[&quot;과정명 직접입력&quot;].ToString()){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;bol_overWriteData = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;annualRow = dr;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;// 입력되어있지 않은 값이라면 row 입력&#xD;&#xA;&#x9;&#x9;/*&#xD;&#xA;&#x9;&#x9;직원번호&#x9;성명&#x9;구분&#x9;과정명&#x9;교육기간&#x9;이수학점&#xD;&#xA;&#x9;&#x9;*/&#xD;&#xA;&#x9;&#x9;if(!bol_overWriteData){&#xD;&#xA;&#x9;&#x9;&#x9;// 나머지 입력&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;구분&quot;] = &quot;리더십&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;string startDate = DateTime.ParseExact(row[&quot;시작일자&quot;].ToString().Split(' ')[0], &quot;MM/dd/yyyy&quot;, System.Globalization.CultureInfo.InvariantCulture).ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;string endDate = DateTime.ParseExact(row[&quot;종료일자&quot;].ToString().Split(' ')[0], &quot;MM/dd/yyyy&quot;, System.Globalization.CultureInfo.InvariantCulture).ToString(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;교육기간&quot;] = $&quot;{startDate}~{endDate}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;이수학점&quot;] = row[&quot;이수&lt;BR&gt;학점&quot;].ToString();&#xD;&#xA;&#x9;&#x9;&#x9;annualRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xD;&#xA;&#x9;&#x9;&#x9;io_dt_annual.Rows.Add(annualRow);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else{&#xD;&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{row[&quot;사번&quot;]}의 리더십 교육은 이미 입력되어있습니다.&quot;);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;catch(Exception e){&#xD;&#xA;&#x9;Console.WriteLine(e.Message);&#xD;&#xA;&#x9;throw;&#xD;&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="258,83" sap2010:WorkflowViewState.IdRef="InvokeCode_6" Language="CSharp">
                                    <ui:InvokeCode.Arguments>
                                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_annual">
                                        <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_21">io_dt_annual</CSharpReference>
                                      </InOutArgument>
                                      <InArgument x:TypeArguments="sd:DataTable" x:Key="dt_iitpEdu">
                                        <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_31">dt_iitpEdu</CSharpValue>
                                      </InArgument>
                                    </ui:InvokeCode.Arguments>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:InvokeCode>
                                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="258,52" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                                    <ui:CommentOut.Body>
                                      <Sequence DisplayName="무시된 액티비티" sap:VirtualizedContainerService.HintSize="376,253" sap2010:WorkflowViewState.IdRef="Sequence_10">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="int int_maxCredit = 10; // 전문, 리더십 최종 학점&#xA;&#xA;// &quot;사번&quot; 컬럼의 중복을 제거하여 List&lt;int&gt;에 담기&#xA;List&lt;string&gt; uniqueEmployeeIdsList = dt_iitpEdu.AsEnumerable()&#xA;                                       .Select(row =&gt; row.Field&lt;string&gt;(&quot;사번&quot;))&#xA;                                       .Distinct()&#xA;                                       .ToList();&#xA;&#xA;foreach(string id in uniqueEmployeeIdsList){&#xA;&#x9;// 개인 학점 합 구하기&#xA;    int employeeCreditSum = dt_iitpEdu.AsEnumerable()&#xA;                                 .Where(row =&gt; row.Field&lt;string&gt;(&quot;사번&quot;) == id &amp;&amp; row.Field&lt;string&gt;(&quot;역량&quot;) == &quot;전문&quot;)&#xA;                                 .Sum(row =&gt; Convert.ToInt32(row.Field&lt;string&gt;(&quot;이수&lt;BR&gt;학점&quot;)));&#xA;&#x9;&#xA;&#x9;if(employeeCreditSum &gt;= int_maxCredit){&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;}&#xA;&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="334,165" sap2010:WorkflowViewState.IdRef="InvokeCode_4" Language="CSharp">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="sd:DataTable" x:Key="dt_iitpEdu">
                                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_29">dt_iitpEdu</CSharpValue>
                                            </InArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </Sequence>
                                    </ui:CommentOut.Body>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:CommentOut>
                                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="258,52" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                                    <ui:CommentOut.Body>
                                      <Sequence DisplayName="무시된 액티비티" sap:VirtualizedContainerService.HintSize="376,418" sap2010:WorkflowViewState.IdRef="Sequence_11">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="(전문) 이수학점, 이수율 계산" Code="/*&#xA;직원번호 | 직원번호&#xA;성명 | 성명&#xA;소속 단 | 소속 단&#xA;소속 팀 | 소속 팀&#xA;직위 | 직위&#xA;구분 | 법정&#xA;과정명 | 법정교육&#xA;교육기간 | &quot;&quot;&#xA;이수학점 | 16&#xA;이수여부 | &#xA;필요학점 | 10&#xA;비고 | &#xA;이수율 |&#xA;*/&#xA;&#xA;// 이수기준학점 = 10(전문, 리더십은 10점)&#xA;int int_maxCredit = 10;&#xA;&#xA;// 데이터테이블 입력&#xA;foreach(DataRow row in dt_iitpEdu.Rows){&#xA;&#x9;// 이미 입력된 건이면 기존 row를 찾아 점수만 다시 입력&#xA;&#x9;bool bol_overWriteData = false;&#xA;&#x9;DataRow alreadyRow = io_dt_annual.NewRow();&#xA;&#x9;&#xA;&#x9;foreach(DataRow dr in io_dt_annual.Rows){&#xA;&#x9;&#x9;if(dr[&quot;직원번호&quot;] == row[&quot;사번&quot;].ToString() &amp;&amp; dr[&quot;구분&quot;] == &quot;전문&quot;){&#xA;&#x9;&#x9;&#x9;bol_overWriteData = true;&#xA;&#x9;&#x9;&#x9;alreadyRow = dr;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// 이미 입력된 건이면 기존 row 에 입력&#xA;&#x9;if(bol_overWriteData){&#xA;&#x9;&#x9;// 나머지 입력&#xA;&#x9;&#x9;alreadyRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;소속 단&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;소속 팀&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;직위&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;구분&quot;] = &quot;전문&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;교육기간&quot;] = $&quot;{row[&quot;시작일자&quot;]}~{row[&quot;종료일자&quot;]}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xA;&#x9;&#x9;int int_credit = Convert.ToInt32(row[&quot;이수&lt;BR&gt;학점&quot;].ToString());&#xA;&#x9;&#x9;alreadyRow[&quot;이수학점&quot;] = int_credit.ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xA;&#x9;&#x9;// 이수율&#xA;&#x9;&#x9;double perCredit = ((double)int_credit/int_maxCredit) *100;&#xA;&#x9;&#x9;perCredit = Math.Round(perCredit, 2);&#xA;&#x9;&#x9;alreadyRow[&quot;이수율&quot;] = $&quot;{perCredit}%&quot;;&#xA;&#x9;&#xA;&#x9;&#x9;// 이수여부&#xA;&#x9;&#x9;if(int_credit &gt;= int_maxCredit){&#xA;&#x9;&#x9;&#x9;alreadyRow[&quot;이수여부&quot;] = &quot;O&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{alreadyRow[&quot;성명&quot;].ToString()}({alreadyRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;alreadyRow[&quot;이수여부&quot;] = &quot;X&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{alreadyRow[&quot;성명&quot;].ToString()}({alreadyRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 미이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// 그렇지 않으면 신규 row 를 추가 후 입력&#xA;&#x9;else{&#xA;&#x9;&#x9;// 나머지 입력&#xA;&#x9;&#x9;DataRow newRow = io_dt_annual.NewRow();&#xA;&#x9;&#x9;io_dt_annual.Rows.Add(newRow);&#xA;&#x9;&#xA;&#x9;&#x9;newRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;소속 단&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;소속 팀&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;직위&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;구분&quot;] = &quot;전문&quot;;&#xA;&#x9;&#x9;newRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;교육기간&quot;] = $&quot;{row[&quot;시작일자&quot;]}~{row[&quot;종료일자&quot;]}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xA;&#x9;&#x9;int int_credit = Convert.ToInt32(row[&quot;이수&lt;BR&gt;학점&quot;].ToString());&#xA;&#x9;&#x9;newRow[&quot;이수학점&quot;] = int_credit.ToString();&#xA;&#x9;&#x9;newRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xA;&#x9;&#x9;// 이수율&#xA;&#x9;&#x9;double perCredit = ((double)int_credit/int_maxCredit) *100;&#xA;&#x9;&#x9;perCredit = Math.Round(perCredit, 2);&#xA;&#x9;&#x9;newRow[&quot;이수율&quot;] = $&quot;{perCredit}%&quot;;&#xA;&#x9;&#xA;&#x9;&#x9;// 이수여부&#xA;&#x9;&#x9;if(int_credit &gt;= int_maxCredit){&#xA;&#x9;&#x9;&#x9;newRow[&quot;이수여부&quot;] = &quot;O&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{newRow[&quot;성명&quot;].ToString()}({newRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;newRow[&quot;이수여부&quot;] = &quot;X&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{newRow[&quot;성명&quot;].ToString()}({newRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 미이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="334,196" sap2010:WorkflowViewState.IdRef="InvokeCode_2" Language="CSharp">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="sd:DataTable" x:Key="dt_iitpEdu">
                                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_26">dt_iitpEdu</CSharpValue>
                                            </InArgument>
                                            <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_annual">
                                              <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_14">io_dt_annual</CSharpReference>
                                            </InOutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="(리더십) 이수학점, 이수율 계산" Code="/*&#xA;직원번호 | 직원번호&#xA;성명 | 성명&#xA;소속 단 | 소속 단&#xA;소속 팀 | 소속 팀&#xA;직위 | 직위&#xA;구분 | 법정&#xA;과정명 | 법정교육&#xA;교육기간 | &quot;&quot;&#xA;이수학점 | 16&#xA;이수여부 | &#xA;필요학점 | 10&#xA;비고 | &#xA;이수율 |&#xA;*/&#xA;&#xA;// 이수기준학점 = 10(전문, 리더십은 10점)&#xA;int int_maxCredit = 10;&#xA;&#xA;// 데이터테이블 입력&#xA;foreach(DataRow row in dt_iitpEdu.Rows){&#xA;&#x9;// 이미 입력된 건이면 기존 row를 찾아 점수만 다시 입력&#xA;&#x9;bool bol_overWriteData = false;&#xA;&#x9;DataRow alreadyRow = io_dt_annual.NewRow();&#xA;&#x9;&#xA;&#x9;foreach(DataRow dr in io_dt_annual.Rows){&#xA;&#x9;&#x9;if(dr[&quot;직원번호&quot;] == row[&quot;사번&quot;].ToString() &amp;&amp; dr[&quot;구분&quot;] == &quot;리더십&quot;){&#xA;&#x9;&#x9;&#x9;bol_overWriteData = true;&#xA;&#x9;&#x9;&#x9;alreadyRow = dr;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// 이미 입력된 건이면 기존 row 에 입력&#xA;&#x9;if(bol_overWriteData){&#xA;&#x9;&#x9;// 나머지 입력&#xA;&#x9;&#x9;alreadyRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;소속 단&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;소속 팀&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;직위&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;구분&quot;] = &quot;리더십&quot;;&#xA;&#x9;&#x9;alreadyRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;교육기간&quot;] = $&quot;{row[&quot;시작일자&quot;]}~{row[&quot;종료일자&quot;]}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xA;&#x9;&#x9;int int_credit = Convert.ToInt32(row[&quot;이수&lt;BR&gt;학점&quot;].ToString());&#xA;&#x9;&#x9;alreadyRow[&quot;이수학점&quot;] = int_credit.ToString();&#xA;&#x9;&#x9;alreadyRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xA;&#x9;&#x9;// 이수율&#xA;&#x9;&#x9;double perCredit = ((double)int_credit/int_maxCredit) *100;&#xA;&#x9;&#x9;perCredit = Math.Round(perCredit, 2);&#xA;&#x9;&#x9;alreadyRow[&quot;이수율&quot;] = $&quot;{perCredit}%&quot;;&#xA;&#x9;&#xA;&#x9;&#x9;// 이수여부&#xA;&#x9;&#x9;if(int_credit &gt;= int_maxCredit){&#xA;&#x9;&#x9;&#x9;alreadyRow[&quot;이수여부&quot;] = &quot;O&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{alreadyRow[&quot;성명&quot;].ToString()}({alreadyRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;alreadyRow[&quot;이수여부&quot;] = &quot;X&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{alreadyRow[&quot;성명&quot;].ToString()}({alreadyRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 미이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// 그렇지 않으면 신규 row 를 추가 후 입력&#xA;&#x9;else{&#xA;&#x9;&#x9;// 나머지 입력&#xA;&#x9;&#x9;DataRow newRow = io_dt_annual.NewRow();&#xA;&#x9;&#x9;io_dt_annual.Rows.Add(newRow);&#xA;&#x9;&#xA;&#x9;&#x9;newRow[&quot;직원번호&quot;] = row[&quot;사번&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;성명&quot;] = row[&quot;사원명&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;소속 단&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;소속 팀&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;직위&quot;] = &quot;&quot;;&#xA;&#x9;&#x9;newRow[&quot;구분&quot;] = &quot;리더십&quot;;&#xA;&#x9;&#x9;newRow[&quot;과정명&quot;] = row[&quot;과정명 직접입력&quot;].ToString();&#xA;&#x9;&#x9;newRow[&quot;교육기간&quot;] = $&quot;{row[&quot;시작일자&quot;]}~{row[&quot;종료일자&quot;]}&quot;; // yyyy-MM-dd~yyyy-MM-dd&#xA;&#x9;&#x9;int int_credit = Convert.ToInt32(row[&quot;이수&lt;BR&gt;학점&quot;].ToString());&#xA;&#x9;&#x9;newRow[&quot;이수학점&quot;] = int_credit.ToString();&#xA;&#x9;&#x9;newRow[&quot;필요학점&quot;] = int_maxCredit.ToString();&#xA;&#x9;&#x9;// 이수율&#xA;&#x9;&#x9;double perCredit = ((double)int_credit/int_maxCredit) *100;&#xA;&#x9;&#x9;perCredit = Math.Round(perCredit, 2);&#xA;&#x9;&#x9;newRow[&quot;이수율&quot;] = $&quot;{perCredit}%&quot;;&#xA;&#x9;&#xA;&#x9;&#x9;// 이수여부&#xA;&#x9;&#x9;if(int_credit &gt;= int_maxCredit){&#xA;&#x9;&#x9;&#x9;newRow[&quot;이수여부&quot;] = &quot;O&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{newRow[&quot;성명&quot;].ToString()}({newRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;newRow[&quot;이수여부&quot;] = &quot;X&quot;;&#xA;&#x9;&#x9;&#x9;// 결과출력&#xA;&#x9;&#x9;&#x9;Console.WriteLine($&quot;{newRow[&quot;성명&quot;].ToString()}({newRow[&quot;직원번호&quot;].ToString()}) 이수 결과 : 미이수({int_credit})&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="334,94" sap2010:WorkflowViewState.IdRef="InvokeCode_3" Language="CSharp">
                                          <ui:InvokeCode.Arguments>
                                            <InArgument x:TypeArguments="sd:DataTable" x:Key="dt_iitpEdu">
                                              <CSharpValue x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpValue`1_28">dt_iitpEdu</CSharpValue>
                                            </InArgument>
                                            <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_dt_annual">
                                              <CSharpReference x:TypeArguments="sd:DataTable" sap2010:WorkflowViewState.IdRef="CSharpReference`1_19">io_dt_annual</CSharpReference>
                                            </InOutArgument>
                                          </ui:InvokeCode.Arguments>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ui:InvokeCode>
                                      </Sequence>
                                    </ui:CommentOut.Body>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                  </ui:CommentOut>
                                </Sequence>
                              </ActivityAction>
                            </ueab:ForEachSheetX.Body>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ueab:ForEachSheetX.Workbook>
                              <InArgument x:TypeArguments="ue:IWorkbookQuickHandle">
                                <CSharpValue x:TypeArguments="ue:IWorkbookQuickHandle" sap2010:WorkflowViewState.IdRef="CSharpValue`1_12">Excel</CSharpValue>
                              </InArgument>
                            </ueab:ForEachSheetX.Workbook>
                          </ueab:ForEachSheetX>
                        </Sequence>
                      </ActivityAction>
                    </ueab:ExcelApplicationCard.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ueab:ExcelApplicationCard.WorkbookPath>
                      <InArgument x:TypeArguments="x:String">
                        <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_13">str_eduInfoFilePath</CSharpValue>
                      </InArgument>
                    </ueab:ExcelApplicationCard.WorkbookPath>
                  </ueab:ExcelApplicationCard>
                </Sequence>
              </ActivityAction>
            </ueab:ExcelProcessScopeX.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ueab:ExcelProcessScopeX>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="632,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence sap:VirtualizedContainerService.HintSize="376,328" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <WriteLine sap2010:Annotation.AnnotationText="에러메세지" DisplayName="Error Msg" sap:VirtualizedContainerService.HintSize="334,83" sap2010:WorkflowViewState.IdRef="WriteLine_4">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <InArgument x:TypeArguments="x:String">
                  <CSharpValue x:TypeArguments="x:String" sap2010:WorkflowViewState.IdRef="CSharpValue`1_14">$"Error Msg : {exception.Message}"</CSharpValue>
                </InArgument>
              </WriteLine>
              <ui:LogMessage DisplayName="Error Msg" sap:VirtualizedContainerService.HintSize="334,52" sap2010:WorkflowViewState.IdRef="LogMessage_4">
                <ui:LogMessage.Level>
                  <InArgument x:TypeArguments="ui:LogLevel">
                    <CSharpValue x:TypeArguments="ui:LogLevel" sap2010:WorkflowViewState.IdRef="CSharpValue`1_15">UiPath.Core.Activities.LogLevel.Error</CSharpValue>
                  </InArgument>
                </ui:LogMessage.Level>
                <ui:LogMessage.Message>
                  <InArgument x:TypeArguments="x:Object">
                    <CSharpValue x:TypeArguments="x:Object" sap2010:WorkflowViewState.IdRef="CSharpValue`1_16">$"Error Msg : {exception.Message}"</CSharpValue>
                  </InArgument>
                </ui:LogMessage.Message>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
              <Rethrow sap:VirtualizedContainerService.HintSize="334,25" sap2010:WorkflowViewState.IdRef="Rethrow_2" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>